// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// A few notes about the MealPlan schema :

// Prisma's String type is used to represent the userId field, which references the id field of the User model.
// The week field references the id field of the Recipe model.
// The confirmDate field is nullable, which is represented by the DateTime? type in the schema.


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}
model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Recipe {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  recipeName   String   @unique
  recipeNameSpanish String?
  path         String?
  author       String
  linkToSource String?
  image        String
  cloudinaryId String?
  ingredients  Json[]
  instructions String[]
  cuisine      String?
  specialDiet  String?
  allergens    String?
  recipeType   String?
  cookTime     String?
  prepTime     String?
  totalTime    String?
  description  String?
  servings     String?
  mealPlans    RecipeOnMealPlan[]
  tags         TagOnRecipe[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MealPlan {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
//  user       User      @relation(fields: [userId], references: [id])
  userId     String
  week       RecipeOnMealPlan[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  confirmDate DateTime?
}

// one user many meal plans
// if recipe deleted or updated, then removed/updated on meal plans
// if meal plans deleted or updated, then removed/updated on Recipes

model RecipeOnMealPlan {
    id      String    @id @default(auto()) @map("_id") @db.ObjectId
    mealPlan   MealPlan? @relation(fields: [mealPlanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    recipe    Recipe?  @relation(fields: [recipeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    mealPlanId String?
    recipeId  String?
}

model Tag {
  id    String       @id @default(auto()) @map("_id") @db.ObjectId
  name  String       @unique
  posts TagOnRecipe[]
}

model TagOnRecipe {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  recipe   Recipe? @relation(fields: [recipeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag    Tag?  @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  recipeId String?
  tagId  String?

}








